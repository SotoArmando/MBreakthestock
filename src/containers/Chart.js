import Chart from "react-google-charts";

import { useEffect, useState } from "react";
import '../css/graphs.css';
import { convertRemToPixels, returnportionwidth } from "../Util";
const data = { "c": [0.000819, 0.000845, 0.000842, 0.000825, 0.000823, 0.000817, 0.000808, 0.000817, 0.000824, 0.000838, 0.000826, 0.00082, 0.000824, 0.000833, 0.000831, 0.000828, 0.000831, 0.000838, 0.000835, 0.00083, 0.000834, 0.000828, 0.000839, 0.000848, 0.000859, 0.00085, 0.000848, 0.000848, 0.000853, 0.000848, 0.000851, 0.000849, 0.000851, 0.000836, 0.000838, 0.000842, 0.000837, 0.000835, 0.000874, 0.000889, 0.000874, 0.000869, 0.000876, 0.000907, 0.000932, 0.000915, 0.000896, 0.000871, 0.000857, 0.000881, 0.000865, 0.000857, 0.000856, 0.000848, 0.000849, 0.000856, 0.000874, 0.000864, 0.00087, 0.000872, 0.000877, 0.000877, 0.000887, 0.000872, 0.000866, 0.000873, 0.000868, 0.000852, 0.000851, 0.00085, 0.000836, 0.000822, 0.000838, 0.000828, 0.000823, 0.000822, 0.000824, 0.000811, 0.000792, 0.000786, 0.000802, 0.000865, 0.000867, 0.000885, 0.000927, 0.000912, 0.000914, 0.000887, 0.000907, 0.000919, 0.000887, 0.000897, 0.000889, 0.000901, 0.000911, 0.000904, 0.000883, 0.00089, 0.000886, 0.000898, 0.000899, 0.000891, 0.000931, 0.000956, 0.000919, 0.000934, 0.000932, 0.000918, 0.000909, 0.000888, 0.000914, 0.000911, 0.000903, 0.000881, 0.000899, 0.000893, 0.000888, 0.000867, 0.000887, 0.000883, 0.00088, 0.000869, 0.000863, 0.000872, 0.000871, 0.000872, 0.000864, 0.000868, 0.000854, 0.000848, 0.000838, 0.000863, 0.000863, 0.000853, 0.000837, 0.000846, 0.00074, 0.000781, 0.00078, 0.000782, 0.000786, 0.000801, 0.000806, 0.0008, 0.000803, 0.000796, 0.000788, 0.000776, 0.00078, 0.000787, 0.000786, 0.000791, 0.000803, 0.000826, 0.000823, 0.000824, 0.000818, 0.000821, 0.000826, 0.000833, 0.000854, 0.000847, 0.000839, 0.000843, 0.000859, 0.000845, 0.000832, 0.000826, 0.000831, 0.000836, 0.000836, 0.000815, 0.000814, 0.000811, 0.000818, 0.000818, 0.000823, 0.000821, 0.000818, 0.000806, 0.000803, 0.000821, 0.000816, 0.000827, 0.000824, 0.000824, 0.000832, 0.000826, 0.000819, 0.000836, 0.000833, 0.000834, 0.00083, 0.000825, 0.000822, 0.000826, 0.000824, 0.00082, 0.000818, 0.000817, 0.000801, 0.000795, 0.000789, 0.000802, 0.000803, 0.000791, 0.000804, 0.000797, 0.00081, 0.00084, 0.000829, 0.000818, 0.000822, 0.000816, 0.000824, 0.000816, 0.00082, 0.000817, 0.000813, 0.000811, 0.000803, 0.000804, 0.000807, 0.000814, 0.000823, 0.000814, 0.000806, 0.000805, 0.000807, 0.000812, 0.000816, 0.000813, 0.000814, 0.00081, 0.000817, 0.000811, 0.000814, 0.000813, 0.000808, 0.000813], "h": [0.000826, 0.000857, 0.000846, 0.000847, 0.000837, 0.000826, 0.000822, 0.000819, 0.000826, 0.000841, 0.00084, 0.000827, 0.000826, 0.000834, 0.000838, 0.000836, 0.000833, 0.000839, 0.00084, 0.000836, 0.000834, 0.000838, 0.000849, 0.000862, 0.000861, 0.000861, 0.000865, 0.000856, 0.000855, 0.000856, 0.000855, 0.000855, 0.000857, 0.000853, 0.00084, 0.000845, 0.000849, 0.000847, 0.000877, 0.000896, 0.000899, 0.000881, 0.000885, 0.000907, 0.000943, 0.000934, 0.000924, 0.000904, 0.000887, 0.000882, 0.000885, 0.000873, 0.000869, 0.000856, 0.000852, 0.000864, 0.000884, 0.000875, 0.000881, 0.000878, 0.000886, 0.000894, 0.000893, 0.000888, 0.000878, 0.000874, 0.000878, 0.000873, 0.000858, 0.000859, 0.000856, 0.000845, 0.000842, 0.000839, 0.00083, 0.000826, 0.000828, 0.000823, 0.000812, 0.000798, 0.000803, 0.00087, 0.000928, 0.000891, 0.000961, 0.000929, 0.000943, 0.00093, 0.000913, 0.000929, 0.000925, 0.00092, 0.000907, 0.000912, 0.000916, 0.00093, 0.000907, 0.000895, 0.000903, 0.000906, 0.000926, 0.000906, 0.000933, 0.000957, 0.000964, 0.000944, 0.000938, 0.000938, 0.000919, 0.000917, 0.000915, 0.000917, 0.000916, 0.000907, 0.000905, 0.000913, 0.0009, 0.000898, 0.000894, 0.000893, 0.0009, 0.000884, 0.000874, 0.000874, 0.00088, 0.000889, 0.000873, 0.000881, 0.000876, 0.000864, 0.000863, 0.00087, 0.000864, 0.000865, 0.000853, 0.000852, 0.000847, 0.000783, 0.000798, 0.000786, 0.000798, 0.000805, 0.000818, 0.000808, 0.000813, 0.00081, 0.000802, 0.000793, 0.000784, 0.000789, 0.0008, 0.000794, 0.000804, 0.00083, 0.000825, 0.000827, 0.000826, 0.000824, 0.000829, 0.000835, 0.000856, 0.00086, 0.000851, 0.00085, 0.000866, 0.000864, 0.000856, 0.000841, 0.000835, 0.00084, 0.00084, 0.000835, 0.000818, 0.000815, 0.000818, 0.000825, 0.000833, 0.000827, 0.000823, 0.000817, 0.000812, 0.000821, 0.000821, 0.000835, 0.000832, 0.00083, 0.000836, 0.000837, 0.000829, 0.000836, 0.000837, 0.000836, 0.000838, 0.00083, 0.00083, 0.00083, 0.000829, 0.000829, 0.000823, 0.000825, 0.000819, 0.000805, 0.000804, 0.000806, 0.000811, 0.000807, 0.000807, 0.000805, 0.000814, 0.000859, 0.000855, 0.000828, 0.000826, 0.000824, 0.000826, 0.000826, 0.000828, 0.000825, 0.000822, 0.000824, 0.000812, 0.000808, 0.000812, 0.000814, 0.000832, 0.000823, 0.000817, 0.000808, 0.000807, 0.000815, 0.000823, 0.000818, 0.000817, 0.000815, 0.000818, 0.000815, 0.000817, 0.000821, 0.000816, 0.000814], "l": [0.000818, 0.000818, 0.000831, 0.000822, 0.000823, 0.000809, 0.000808, 0.000808, 0.000816, 0.000824, 0.000821, 0.000818, 0.000815, 0.00082, 0.000828, 0.000822, 0.000824, 0.000826, 0.000831, 0.000825, 0.000823, 0.000827, 0.000827, 0.000838, 0.000847, 0.000842, 0.000846, 0.000845, 0.000843, 0.000848, 0.000848, 0.000847, 0.000848, 0.000831, 0.000826, 0.000836, 0.000834, 0.000835, 0.000835, 0.000856, 0.000872, 0.000859, 0.000868, 0.000873, 0.000897, 0.000911, 0.000892, 0.000871, 0.000856, 0.000854, 0.000865, 0.000856, 0.000848, 0.000832, 0.00084, 0.000848, 0.000853, 0.000855, 0.000862, 0.000866, 0.000873, 0.000873, 0.000876, 0.000872, 0.000862, 0.00086, 0.00086, 0.000852, 0.00084, 0.000844, 0.000833, 0.000819, 0.000821, 0.000825, 0.000821, 0.000817, 0.000814, 0.000804, 0.000758, 0.00077, 0.00077, 0.00079, 0.00086, 0.000857, 0.000885, 0.000902, 0.000899, 0.000887, 0.00089, 0.000906, 0.000884, 0.000888, 0.000881, 0.000889, 0.000897, 0.000902, 0.00088, 0.00088, 0.00088, 0.000883, 0.00089, 0.000885, 0.000885, 0.000914, 0.000919, 0.000909, 0.000918, 0.000916, 0.000893, 0.000888, 0.000886, 0.000901, 0.000902, 0.00088, 0.000866, 0.000888, 0.000868, 0.000863, 0.000833, 0.000851, 0.000879, 0.000862, 0.000855, 0.000859, 0.00086, 0.000869, 0.00086, 0.000857, 0.000848, 0.000845, 0.000835, 0.000836, 0.000847, 0.000835, 0.000834, 0.000837, 0.000738, 0.000696, 0.000768, 0.000756, 0.000765, 0.000778, 0.000792, 0.000794, 0.000798, 0.000796, 0.000788, 0.000773, 0.000768, 0.000774, 0.000777, 0.000782, 0.000781, 0.000802, 0.000807, 0.000813, 0.000807, 0.000813, 0.000808, 0.000814, 0.000832, 0.000845, 0.000836, 0.000837, 0.000842, 0.000843, 0.000829, 0.000813, 0.000821, 0.000829, 0.000831, 0.000813, 0.000807, 0.000799, 0.000799, 0.000814, 0.000809, 0.000816, 0.000812, 0.000804, 0.000798, 0.000803, 0.000811, 0.000812, 0.000817, 0.00081, 0.000822, 0.000824, 0.000816, 0.000818, 0.000828, 0.000829, 0.000826, 0.00082, 0.00082, 0.000819, 0.000822, 0.000818, 0.000808, 0.000812, 0.000798, 0.000792, 0.000788, 0.000788, 0.000801, 0.00079, 0.000793, 0.00079, 0.000798, 0.000801, 0.000824, 0.000812, 0.000816, 0.000812, 0.000812, 0.000814, 0.000816, 0.000815, 0.000812, 0.000809, 0.0008, 0.000798, 0.000802, 0.000805, 0.000812, 0.000808, 0.000805, 0.000803, 0.000798, 0.000804, 0.000808, 0.000809, 0.000808, 0.000806, 0.000807, 0.000807, 0.000807, 0.000811, 0.000805, 0.000808], "o": [0.000822, 0.000819, 0.000845, 0.000841, 0.000825, 0.000824, 0.000816, 0.00081, 0.000818, 0.000825, 0.00084, 0.000826, 0.00082, 0.000824, 0.000834, 0.000832, 0.000829, 0.000831, 0.000837, 0.000835, 0.000831, 0.000832, 0.000828, 0.000838, 0.000848, 0.000859, 0.000851, 0.000848, 0.000848, 0.000854, 0.00085, 0.000851, 0.000851, 0.000853, 0.000835, 0.00084, 0.000842, 0.000837, 0.000836, 0.000873, 0.000889, 0.000874, 0.000868, 0.000875, 0.000907, 0.000932, 0.000914, 0.000894, 0.000873, 0.000856, 0.000881, 0.000866, 0.000859, 0.000854, 0.000848, 0.000849, 0.000856, 0.000874, 0.000863, 0.000869, 0.000873, 0.000879, 0.000877, 0.000887, 0.000875, 0.000867, 0.000874, 0.000868, 0.000854, 0.000848, 0.000849, 0.000838, 0.000822, 0.000838, 0.000826, 0.000822, 0.000822, 0.000823, 0.000812, 0.000791, 0.000786, 0.000802, 0.000866, 0.000867, 0.000887, 0.000929, 0.000913, 0.000915, 0.00089, 0.000908, 0.000921, 0.000888, 0.000898, 0.000889, 0.000901, 0.000911, 0.000904, 0.000883, 0.00089, 0.000886, 0.000899, 0.000899, 0.00089, 0.000931, 0.000955, 0.000919, 0.000933, 0.000932, 0.000918, 0.00091, 0.000887, 0.000913, 0.000911, 0.000905, 0.000881, 0.000899, 0.000892, 0.000887, 0.000869, 0.000887, 0.000883, 0.000881, 0.000867, 0.000862, 0.000871, 0.000871, 0.000872, 0.000864, 0.000867, 0.000853, 0.000848, 0.000837, 0.000863, 0.000863, 0.000853, 0.000837, 0.000846, 0.000741, 0.000779, 0.00078, 0.000782, 0.000786, 0.000801, 0.000806, 0.0008, 0.000803, 0.000798, 0.000788, 0.000776, 0.000779, 0.000787, 0.000784, 0.000792, 0.000803, 0.000825, 0.000824, 0.000824, 0.000819, 0.000821, 0.000826, 0.000834, 0.000855, 0.000846, 0.000838, 0.000842, 0.000861, 0.000847, 0.000832, 0.000828, 0.000829, 0.000836, 0.000835, 0.000813, 0.000814, 0.00081, 0.000817, 0.000818, 0.000823, 0.000819, 0.000817, 0.000805, 0.000803, 0.000821, 0.000816, 0.000828, 0.000824, 0.000824, 0.000833, 0.000826, 0.000819, 0.000835, 0.000835, 0.000834, 0.000829, 0.000826, 0.00082, 0.000828, 0.000824, 0.00082, 0.000816, 0.000817, 0.0008, 0.000793, 0.000789, 0.000803, 0.000803, 0.000793, 0.000805, 0.000798, 0.000809, 0.000838, 0.000828, 0.000817, 0.000823, 0.000818, 0.000825, 0.000816, 0.00082, 0.000817, 0.000815, 0.000811, 0.000802, 0.000806, 0.000807, 0.000814, 0.000823, 0.000814, 0.000807, 0.000804, 0.000805, 0.000812, 0.000816, 0.000814, 0.000815, 0.000808, 0.000815, 0.000811, 0.000813, 0.000813, 0.000808], "s": "ok", "t": [1613577600, 1613581200, 1613584800, 1613588400, 1613592000, 1613595600, 1613599200, 1613602800, 1613606400, 1613610000, 1613613600, 1613617200, 1613620800, 1613624400, 1613628000, 1613631600, 1613635200, 1613638800, 1613642400, 1613646000, 1613649600, 1613653200, 1613656800, 1613660400, 1613664000, 1613667600, 1613671200, 1613674800, 1613678400, 1613682000, 1613685600, 1613689200, 1613692800, 1613696400, 1613700000, 1613703600, 1613707200, 1613710800, 1613714400, 1613718000, 1613721600, 1613725200, 1613728800, 1613732400, 1613736000, 1613739600, 1613743200, 1613746800, 1613750400, 1613754000, 1613757600, 1613761200, 1613764800, 1613768400, 1613772000, 1613775600, 1613779200, 1613782800, 1613786400, 1613790000, 1613793600, 1613797200, 1613800800, 1613804400, 1613808000, 1613811600, 1613815200, 1613818800, 1613822400, 1613826000, 1613829600, 1613833200, 1613836800, 1613840400, 1613844000, 1613847600, 1613851200, 1613854800, 1613858400, 1613862000, 1613865600, 1613869200, 1613872800, 1613876400, 1613880000, 1613883600, 1613887200, 1613890800, 1613894400, 1613898000, 1613901600, 1613905200, 1613908800, 1613912400, 1613916000, 1613919600, 1613923200, 1613926800, 1613930400, 1613934000, 1613937600, 1613941200, 1613944800, 1613948400, 1613952000, 1613955600, 1613959200, 1613962800, 1613966400, 1613970000, 1613973600, 1613977200, 1613980800, 1613984400, 1613988000, 1613991600, 1613995200, 1613998800, 1614002400, 1614006000, 1614009600, 1614013200, 1614016800, 1614020400, 1614024000, 1614027600, 1614031200, 1614034800, 1614038400, 1614042000, 1614045600, 1614049200, 1614052800, 1614056400, 1614060000, 1614063600, 1614067200, 1614070800, 1614074400, 1614078000, 1614081600, 1614085200, 1614088800, 1614092400, 1614096000, 1614099600, 1614103200, 1614106800, 1614110400, 1614114000, 1614117600, 1614121200, 1614124800, 1614128400, 1614132000, 1614135600, 1614139200, 1614142800, 1614146400, 1614150000, 1614153600, 1614157200, 1614160800, 1614164400, 1614168000, 1614171600, 1614175200, 1614178800, 1614182400, 1614186000, 1614189600, 1614193200, 1614196800, 1614200400, 1614204000, 1614207600, 1614211200, 1614214800, 1614218400, 1614222000, 1614225600, 1614229200, 1614232800, 1614236400, 1614240000, 1614243600, 1614247200, 1614250800, 1614254400, 1614258000, 1614261600, 1614265200, 1614268800, 1614272400, 1614276000, 1614279600, 1614283200, 1614286800, 1614290400, 1614294000, 1614297600, 1614301200, 1614304800, 1614308400, 1614312000, 1614315600, 1614319200, 1614322800, 1614326400, 1614330000, 1614333600, 1614337200, 1614340800, 1614344400, 1614348000, 1614351600, 1614355200, 1614358800, 1614362400, 1614366000, 1614369600, 1614373200, 1614376800, 1614380400, 1614384000, 1614387600, 1614391200, 1614394800, 1614398400, 1614402000, 1614405600, 1614409200, 1614412800, 1614416400, 1614420000, 1614423600, 1614427200, 1614430800, 1614434400, 1614438000], "v": [4679.59, 38329.99, 17740.16, 10623.45, 11363.32, 10275.98, 7214.25, 5841.58, 7875.1, 16605.76, 23515.16, 3877.71, 9321.62, 8517.03, 13427.2, 16670.85, 12682.52, 12054.46, 12182.27, 9061.95, 13139.54, 12328.99, 21550.12, 23641.52, 17648.7, 12470.36, 21090.54, 7396.62, 6913.05, 9670.08, 9605.28, 16844.9, 9711.31, 19615.57, 14956.21, 7349.95, 6038.49, 7399.06, 36457.38, 34820.29, 31846.97, 33926.06, 20691.04, 25993.96, 87702.3, 45102.66, 24074.79, 55004.1, 23228.6, 18801.03, 6232.39, 12599.39, 20735.72, 29443.2, 15052.83, 17904.24, 32531.76, 17306.09, 11265.33, 8161.7, 11087.75, 15671.41, 11671.3, 16291.91, 15630.49, 11417.84, 9467.23, 14374.44, 19496.37, 10437.99, 17845.71, 36521.66, 17157.36, 10890.69, 14816.83, 10713.74, 12896.1, 13049.11, 62954.5, 18587.92, 42349.22, 111505.81, 198025.84, 84268.95, 136240.02, 35487.67, 50527.39, 38920.78, 31172, 25439.46, 33408.73, 35355.35, 21010.1, 24381.91, 21626.02, 20506.83, 15991.25, 22820.82, 25748.72, 19886.47, 33684.71, 41135.59, 67118.17, 64310.01, 56500, 42009.16, 16080.24, 19269.03, 39052.65, 28914.07, 21069.53, 13023.85, 11729.05, 28785.78, 51418.07, 25371.05, 49908.9, 51088.36, 89684.32, 56393.58, 34297.38, 20674.22, 20101.04, 15474.3, 19556.18, 14588.57, 27396.16, 21327.84, 25262.89, 22104.57, 21350.27, 17145.77, 14228.49, 41613.58, 23303.78, 14896.42, 83388.28, 111034.49, 47657.95, 42221.23, 27911, 28043.66, 37705.69, 15143.99, 18435.17, 20866.12, 13145.88, 19988.02, 18625.65, 10913.82, 19104.9, 7667.55, 16718.24, 31410.37, 21882.95, 10648.07, 11178.93, 5688.39, 20638.95, 32483.38, 29118.68, 14645.93, 10100.19, 12314.47, 18324.83, 28084.96, 23461.7, 34661.91, 31063.63, 7856.05, 6158.08, 16108.9, 14670.86, 14898.68, 15044.1, 9526.06, 43519.38, 10201.72, 8228.1, 6477.63, 11854.78, 8101.91, 8973.08, 14498.21, 8371.23, 11188.99, 12241.72, 11400.71, 8576.61, 17759.96, 13400.55, 5324.58, 13115.49, 9847.17, 6154.41, 3658.41, 8017.74, 9070.36, 21870.36, 10296.87, 21977.32, 12898.92, 5929.89, 2782.65, 2480.01, 8379.66, 5933.57, 12009.99, 11843.05, 56794.33, 50210.47, 21092.69, 6669.18, 4207.33, 13250.04, 5722.38, 5615.36, 4808.73, 3666.41, 9693.48, 9521.06, 11017.16, 12867.67, 7191.52, 11704.64, 3839.78, 10808.78, 2330.35, 7213.21, 4073.11, 11901.75, 6472, 4302.3, 10781.07, 10000.95, 14394.16, 9632.6, 13115.2, 5058.47, 685.78] }
export default function Chart0() {
    const [loaded, setLoaded] = useState(false)
    const [rect, setRect] = useState(false)
    const [points, setPoints] = useState("")
    const max = Math.max(...data.c);
    const min = Math.min(...data.c);
    const u = 84.21052631578951 / 5;
    const u1 =  ((max - min) / 5) < 1 ? ((max - min) / 5) * 100000 : ((max - min) / 5); 
    if (!loaded) {
        setLoaded(true)
    }

    useEffect(() => {
        setRect(document.querySelector("#chart_0").getBoundingClientRect())
    })
    // unidad horizontal 3.6rem, unidad vertical :[u].
    // 10 dias hasta el dia de hoy
    const coord = (x,y) => (x*convertRemToPixels(3.6))+","+(y*returnportionwidth(u * 0.01,rect.height))+" "
    return <div id="chart_0" className="row center mobilecorebox_x100 back_3">
        <svg className="graph mobilecorebox_13 corebox_17 mobilecorebox_x100" viewBox="0 0 100% 100%">
           
            <g className="">
                {"1".repeat(5).split("").map((e, i) => <line className="axis-lines" x1={"0"} y1={(u * (i + 1)) + "%"} x2={"100%"} y2={(u * (i + 1)) + "%"} />)}
            </g>
            <g>
                {"1".repeat(30).split("").map((e, i) => <line className="axis-lines" x1={((i + 1) * 3.6) + "rem"} y1={"0rem"} x2={((i + 1) * 3.6) + "rem"} y2={"100%"} />)}
            </g>
            <g className="labels y-labels">
                {"1".repeat(5).split("").map((e, i) => <text className="chart_text_0" style={{ dominantBaseline: "central", textAnchor: 'end' }} x={"2.25rem"} y={(u * (5 - (i + 1))) + "%"} >{((min + (u1 * (i - 1)))).toString().slice(0,4)}</text>)}
            </g>
            <g className="labels x-labels">
                {"1".repeat(30).split("").map((e, i) => <text className="chart_text_0" style={{ dominantBaseline: "text-before-edge" }} x={(3.6 * (i + 1)) + "rem"} y={"84.21052631578951%"}>{i}</text>)}

            </g>
            <g>
                <line className="last_line" x1={"3.6rem"} y1={"84.21052631578951%"} x2={"100%"} y2={"84.21052631578951%"} />
                <line className="last_line" x1={"3.6rem"} y1={"0rem"} x2={"3.6rem"} y2={"84.21052631578951%"} />
            </g>
           
            {/* <g className="headings x-heading">
                <text x="50%" y={450}>X Axis Heading</text>
            </g> */}
            {/* <g className="headings y-heading">
                <text x={15} y={200} transform="rotate(-90,15,200)">Y Axis Heading</text>
            </g> */}
            {rect ? <path x="3.6rem" y="84.21052631578951%" className="graphline" d={"M " + coord(1,6-1) + coord(2,6-2)} /> : "Loading"}

            
        </svg>
    </div>;
}